# -*- coding: utf-8 -*-
"""функция Numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x8AUjZLqa7UvN_4cld-AWZBV9UoMKc2Q
"""

import numpy as np
import scipy

I = np.array([0.9, 0.1, 0.8], ndmin = 2).T
t = np.array([0.7,0.09,0.5], ndmin = 2).T
w_i_h = np.array([[0.9, 0.3, 0.4], [0.2, 0.8, 0.2], [0.1, 0.5, 0.6]])
w_h_o = np.array([[0.3, 0.7, 0.5], [0.6, 0.5, 0.2], [0.8, 0.1, 0.9]])

for i in range(10000):
  o_h = w_i_h.dot(I)
  o_h = scipy.special.expit(o_h)
  o = w_h_o.dot(o_h)
  o = scipy.special.expit(o)

  E_o = t - o
  E_h = np.dot(w_h_o.T, E_o)
  w_h_o += 0.1 *E_o*o* (1 - o) * o_h.T
  w_i_h += 0.1 *E_h*o_h* (1 - o_h) * I.T

print(o)

class NeuralNetwork:
  def __init__(self, input_nodes, hidden_nodes, output_nodes, learning_rate):
    self.input_nodes = input_nodes
    self.hidden_nodes = hidden_nodes
    self.output_nodes = output_nodes
    self.learning_rate = learning_rate


    np.random.seed(42)
    self.w_i_h = np.random.normal (0.01, 0.99, (hidden_nodes, input_nodes))
    self.w_h_o = np.random.normal (0.01, 0.99, (output_nodes, hidden_nodes))

  def forward(self, inputs):
       inputs = np.array(inputs, ndmin=2).T
       o_h= self.w_i_h.dot(I)
       o_h = scipy.special.expit(o_h)
       o = self.w_h_o.dot(o_h)
       o = scipy.special.expit(o)
       return o

def train (self, inputs_list, targets_list) :
      inputs = np.array(inputs_list, ndmin=2).T
      targets = np.array(targets_list, ndmin=2).T
      hidden_inputs = np.dot(self.wih, inputs)
      hidden_outputs = self.activation_function(hidden_inputs)
      final_inputs = np.dot(self.who, hidden_outputs)
      final_outputs = self.activation_function(final_inputs)
      output_errors = targets - final_outputs
      hidden_errors = np.dot(self.who.T, output_errors)
      self.who += self.lr * np .dot ((output_errors * final_outputs * (1.0 - final_outputs)),np.transpose (hidden_outputs))
      self.wih += self.lr * np.dot((hidden_errors * hidden_outputs * (1.0 - hidden_outputs)), np.transpose(inputs))
      pass

def query(self, inputs_list):
      inputs = np.array(inputs, ndmin=2).T
      hidden_inputs = np.dot(self.w_i_h, inputs)
      hidden_outputs = self.activation_function(hidden_inputs)
      final_inputs = np.dot(self.w_h_o, hidden_outputs)
      final_outputs = self.activation__function(final_inputs)
      return final_outputs

I = np.array([0.9, 0.1, 0.8], ndmin = 2).T
net = NeuralNetwork(3, 3, 3, 0.1)
result = net.forward(I)
print(result)